Understanding asyncio/await

This blog is an attempt at simplify understanding of the structure of writing asynchronous programs with focus on asyncio with await. This blog does not cover every aspect of asynchronouse programs in depth or the variouse design patterns.

Let the games begin.

Here is a simple code that does the same work snchronously and asynchronously:

The synchronous function code and output:
#This code attempts to execute a GET Request on a website
import requests
import time

start_time_sync_counter = time.perf_counter()

def function_synchronous_http_request():
    #sending get request and saving the response's status code
    print("Trying to fetch data from httpbin.org")
    response = requests.get(url='https://httpbin.org/get')
    print("\tResponse from website:" + str(response.status_code))
    print("Data fetch complete\n")

def function_main_synchronous():
    function_synchronous_http_request()
    function_synchronous_http_request()
    function_synchronous_http_request()
    function_synchronous_http_request()
    function_synchronous_http_request()
    function_synchronous_http_request()
    function_synchronous_http_request()
    function_synchronous_http_request()
    function_synchronous_http_request()
    function_synchronous_http_request()

function_main_synchronous()

end_time_sync_counter = time.perf_counter()

print("Total time taken for synchronous code: " + str(end_time_sync_counter-start_time_sync_counter) + "\n\n")

==================Output==========================

Trying to fetch data from httpbin.org
	Response from website:200
Data fetch complete

Trying to fetch data from httpbin.org
	Response from website:200
Data fetch complete

Trying to fetch data from httpbin.org
	Response from website:200
Data fetch complete

Trying to fetch data from httpbin.org
	Response from website:200
Data fetch complete

Trying to fetch data from httpbin.org
	Response from website:200
Data fetch complete

Trying to fetch data from httpbin.org
	Response from website:200
Data fetch complete

Trying to fetch data from httpbin.org
	Response from website:200
Data fetch complete

Trying to fetch data from httpbin.org
	Response from website:200
Data fetch complete

Trying to fetch data from httpbin.org
	Response from website:200
Data fetch complete

Trying to fetch data from httpbin.org
	Response from website:200
Data fetch complete

Total time taken for synchronous code: 13.8156027




Corresponding Asynchronous function and output:

import time
import asyncio
import aiohttp

start_time_async_counter = time.perf_counter()

async def coroutine_asynchronous_http_request():
    print("Trying to fetch data from httpbin.org")
    session = aiohttp.ClientSession()
    resp = await session.get(url='https://httpbin.org/get')
    print(resp.status)
    await session.close()
    print("Data fetch complete")

async def coroutine_main_async():
    await asyncio.gather(coroutine_asynchronous_http_request(),
                         coroutine_asynchronous_http_request(),
                         coroutine_asynchronous_http_request(),
                         coroutine_asynchronous_http_request(),
                         coroutine_asynchronous_http_request(),
                         coroutine_asynchronous_http_request(),
                         coroutine_asynchronous_http_request(),
                         coroutine_asynchronous_http_request(),
                         coroutine_asynchronous_http_request(),
                         coroutine_asynchronous_http_request()
                         )

loop = asyncio.get_event_loop()
loop.run_until_complete(coroutine_main_async())
# OR
# asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
# asyncio.run(coroutine_main_async())

end_time_async_counter = time.perf_counter()

print("Total time taken for asynchronous code: " + str(end_time_async_counter - start_time_async_counter) + "\n\n")

Here is a comparison of both side by side:
#Insert image here.

Now let's compare the two and understand how we get from synhronous code to asynchronous code:

The control flow of the above Synchronous code is:
function_main_synchronous():
    function_synchronous_http_request():
        Entire code block executing inside function_synchronous_http_request, taking approximately 1 sec. Out of this 1 sec, most of the time is spent "waiting" on response from the remote server
    function_synchronous_http_request():
        Entire code block executing inside function_synchronous_http_request, taking approximately 1 sec. Out of this 1 sec, most of the time is spent "waiting" on response from the remote server
    function_synchronous_http_request():
        Entire code block executing inside function_synchronous_http_request, taking approximately 1 sec. Out of this 1 sec, most of the time is spent "waiting" on response from the remote server
    So on and so forth ....

This is pretty self explanatory and does not need much explanations


The control flow of the asynchronous code is:

event_loop:
        asyncio.gather:
            coroutine_asynchronous_http_request_1():
                awaitable function: session.get()
                    This function will pause when there is a IO Operation happening, and let the other functions execute, and come back to this later. Approx 0.1 sec. When "waiting" on response from remote server, move on to the next function
            coroutine_asynchronous_http_request_2():
                awaitable function: session.get()
                    This function will pause when there is a IO Operation happening, and let the other functions execute, and come back to this later. Approx 0.1 sec. When "waiting" on response from remote server, move on to the next function
            coroutine_asynchronous_http_request_3():
                awaitable function: session.get()
                    This function will pause when there is a IO Operation happening, and let the other functions execute, and come back to this later. Approx 0.1 sec. When "waiting" on response from remote server, move on to the next function
            coroutine_asynchronous_http_request_4():
                awaitable function: session.get()
                    This function will pause when there is a IO Operation happening, and let the other functions execute, and come back to this later. Approx 0.1 sec. When "waiting" on response from remote server, move on to the next function
            coroutine_asynchronous_http_request_1():
                awaitable function: session.get()
                    This function will continue executing from the last point it paused at
            coroutine_asynchronous_http_request_2():
                awaitable function: session.get()
                    This function will continue executing from the last point it paused at
            coroutine_asynchronous_http_request_3():
                awaitable function: session.get()
                    This function will continue executing from the last point it paused at
            coroutine_asynchronous_http_request_4():
                awaitable function: session.get()
                    This function will continue executing from the last point it paused at
            .
            .
            .



Now let's understand async code better:
event_loop: (The event_loop is what handles the "switching" of all asynchronous functions)
    coroutine_main_async(): (We will come back to this)
        asyncio.gather: (We will come back to this)
            coroutine_asynchronous_http_request_1(): (When defining an asynchronous function, we prefix the definition with the async keyword. The async function should always contain "await" functions. More on "await" functions after.
              Eg.
                async def function1():
                    #code block that contains an "await" object
                    await asyncio.sleep(1)
                async def function2():
                    #code block that contains an "await" object
                    await await aiohttp.ClientSession().get(url=URL)
                async def function1():
                    code block that contains an "await" object
                )
                awaitable function: session.get()
                    This function will pause when there is a IO Operation happening, and let the other functions execute, and come back to this later

                    "Awaitable" objects are those objects/functions that can be paused if there is an IO operation on that function.
                    Eg.
                    1. await asyncio.sleep(10) as opposed to time.sleep(10) which is not awaitable(or cannot pause the course of the function)
                    2. await aiohttp.ClientSession().get(url=URL) as opposed to requests.get(url=URL) which is not awaitable(or cannot pause the course of the function)
                    3. await asyncio.gather() -> This is an "awaitable" coroutine

To recap, in short, this is the control flow, and always will be in an async code:
    event_loop -> Control mechanism. Accepts one asynchronous function (In this case, asyncio.gather)
        asyncio.gather -> This itself an asynchronous function that can accept multiple asynchronous functions, wait on them and then gather the results. This cannot run by itself. It has to be called by the event_loop
            coroutine_asynchronous_http_request(): -> This is an asynchronus function (or coroutine)
                    What does coroutine mean? co-operative routine
                    Subroutines vs coroutines
                        Subroutines = Sub-routines = Sub-programs = functions = Will execute the entire body of the function before ending.
                        Coroutines = Co-operative routines = Can be paused in the course of the execution and be continued later.
                await FUNCTION_NAME ->
                    Functions that are "awaitable" = That can pause/give up/yield control, and be resumed later.
                       Eg.
                        await asyncio.sleep(1)
                        await aiohttp.ClientSession().get(url=URL)
                        await ayncio.gather

